// These constants represent the RISC-V ELF and the image ID generated by risc0-build.
// The ELF is used for proving and the ID is used for verification.
use methods::{VERIFICATION_GUEST_ELF, VERIFICATION_GUEST_ID};
use risc0_zkvm::{default_prover, ExecutorEnv};
use serde::{Deserialize, Serialize};

// Re-export the same data structures from guest
#[derive(Debug, Serialize, Deserialize)]
pub enum MetricType {
    XAccountViews {
        account: String,
        week_start: String,
        week_end: String,
        threshold: u64,
    },
    PredictionMarket {
        market_address: String,
        market_question: String,
    },
    DiscordSurvey {
        server_id: String,
        channel: String,
        survey_questions: Vec<String>,
        threshold_percent: f64,
    },
}

#[derive(Debug, Serialize, Deserialize)]
pub struct VerificationInput {
    pub metric: MetricType,
    pub verification_data: String,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct VerificationResult {
    pub metric_met: bool,
    pub actual_value: String,
    pub threshold: String,
    pub evidence: String,
    pub timestamp: u64,
}

#[tokio::main]
async fn main() {
    // Initialize tracing
    tracing_subscriber::fmt()
        .with_env_filter(tracing_subscriber::filter::EnvFilter::from_default_env())
        .init();

    println!("🔬 Running Aug Lab Symbiont Verification Tests...\n");

    // Test all three verification types
    test_x_account_verification().await;
    test_prediction_market_verification().await;
    test_discord_survey_verification().await;
}

async fn test_x_account_verification() {
    println!("📊 Testing X Account Views Verification (Metric 1)");
    
    // Mock LLM response data for Aug Lab X account
    let mock_llm_response = r#"{
        "total_views": 45000,
        "posts_analyzed": 8,
        "week_start": "2025-08-16",
        "week_end": "2025-08-23",
        "post_details": [
            {"url": "https://x.com/auglabofficial/status/1", "views": 12000, "date": "2025-08-16"},
            {"url": "https://x.com/auglabofficial/status/2", "views": 8500, "date": "2025-08-17"},
            {"url": "https://x.com/auglabofficial/status/3", "views": 15000, "date": "2025-08-18"},
            {"url": "https://x.com/auglabofficial/status/4", "views": 9500, "date": "2025-08-19"}
        ]
    }"#;

    let verification_input = VerificationInput {
        metric: MetricType::XAccountViews {
            account: "auglabofficial".to_string(),
            week_start: "2025-08-16".to_string(),
            week_end: "2025-08-23".to_string(),
            threshold: 30000,
        },
        verification_data: mock_llm_response.to_string(),
    };

    let result = run_verification(verification_input).await;
    print_verification_result("X Account Views", &result);
}

async fn test_prediction_market_verification() {
    println!("📈 Testing Prediction Market Verification (Metric 2)");
    
    // Mock prediction market resolution data
    let mock_market_data = r#"{
        "resolved": true,
        "resolution": "YES",
        "market_address": "0x1234567890abcdef",
        "resolution_date": "2025-08-16T10:00:00Z"
    }"#;

    let verification_input = VerificationInput {
        metric: MetricType::PredictionMarket {
            market_address: "0x1234567890abcdef".to_string(),
            market_question: "Will 90% of Aug Lab members present projects?".to_string(),
        },
        verification_data: mock_market_data.to_string(),
    };

    let result = run_verification(verification_input).await;
    print_verification_result("Prediction Market", &result);
}

async fn test_discord_survey_verification() {
    println!("💬 Testing Discord Survey Verification (Metric 3)");
    
    // Mock Discord survey analysis data
    let mock_survey_data = r#"{
        "total_respondents": 25,
        "percent_meeting_threshold": 85.5,
        "individual_scores": [
            {"user_id": "user1", "positive_response_rate": 100.0},
            {"user_id": "user2", "positive_response_rate": 75.0},
            {"user_id": "user3", "positive_response_rate": 90.0}
        ]
    }"#;

    let verification_input = VerificationInput {
        metric: MetricType::DiscordSurvey {
            server_id: "aug_lab_discord".to_string(),
            channel: "residents-general".to_string(),
            survey_questions: vec![
                "Aug lab was the best use of my summer".to_string(),
                "I am proud of my project".to_string(),
                "My job prospects improved".to_string(),
                "I made lasting connections".to_string(),
            ],
            threshold_percent: 80.0,
        },
        verification_data: mock_survey_data.to_string(),
    };

    let result = run_verification(verification_input).await;
    print_verification_result("Discord Survey", &result);
}

async fn run_verification(input: VerificationInput) -> VerificationResult {
    // Create the executor environment with our input
    let env = ExecutorEnv::builder()
        .write(&input)
        .unwrap()
        .build()
        .unwrap();

    // Get the default prover
    let prover = default_prover();

    // Prove the verification
    let prove_info = prover
        .prove(env, VERIFICATION_GUEST_ELF)
        .unwrap();

    // Extract the receipt
    let receipt = prove_info.receipt;

    // Decode the verification result from the journal
    let result: VerificationResult = receipt.journal.decode().unwrap();

    // Verify the receipt
    receipt.verify(VERIFICATION_GUEST_ID).unwrap();

    result
}

fn print_verification_result(metric_name: &str, result: &VerificationResult) {
    println!("  ✅ {} Verification Complete", metric_name);
    println!("     Metric Met: {}", if result.metric_met { "✅ YES" } else { "❌ NO" });
    println!("     Actual: {} | Threshold: {}", result.actual_value, result.threshold);
    println!("     Evidence: {}", result.evidence);
    println!("     Timestamp: {}", result.timestamp);
    println!();
}

// Helper function to create sample inputs for testing
pub fn create_sample_verification_inputs() -> Vec<VerificationInput> {
    vec![
        // X Account Views Test
        VerificationInput {
            metric: MetricType::XAccountViews {
                account: "auglabofficial".to_string(),
                week_start: "2025-08-16".to_string(),
                week_end: "2025-08-23".to_string(),
                threshold: 30000,
            },
            verification_data: r#"{"total_views": 45000, "posts_analyzed": 8, "week_start": "2025-08-16", "week_end": "2025-08-23", "post_details": []}"#.to_string(),
        },
        
        // Prediction Market Test  
        VerificationInput {
            metric: MetricType::PredictionMarket {
                market_address: "0x1234567890abcdef".to_string(),
                market_question: "Will 90% of Aug Lab members present projects?".to_string(),
            },
            verification_data: r#"{"resolved": true, "resolution": "YES", "market_address": "0x1234567890abcdef", "resolution_date": "2025-08-16T10:00:00Z"}"#.to_string(),
        },
        
        // Discord Survey Test
        VerificationInput {
            metric: MetricType::DiscordSurvey {
                server_id: "aug_lab_discord".to_string(),
                channel: "residents-general".to_string(),
                survey_questions: vec!["Question 1".to_string(), "Question 2".to_string()],
                threshold_percent: 80.0,
            },
            verification_data: r#"{"total_respondents": 25, "percent_meeting_threshold": 85.5, "individual_scores": []}"#.to_string(),
        },
    ]
}
